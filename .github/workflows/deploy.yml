name: Deploy Infrastructure and Website

on:
  push:
    branches:
      - main

jobs:
  recreate_bucket:
    name: 'Recreate S3 Bucket'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Destroy existing bucket if it exists
        id: destroy_bucket
        run: |
          BUCKET_NAME="site-estatico-s3-asp"
          echo "Verificando se o bucket $BUCKET_NAME existe..."
          
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "O bucket $BUCKET_NAME existe. Removendo..."
            
            # Primeiro, esvaziar o bucket (requisito para exclusão)
            echo "Esvaziando o bucket..."
            aws s3 rm s3://$BUCKET_NAME --recursive
            
            # Então, excluir o bucket 
            echo "Excluindo o bucket..."
            aws s3api delete-bucket --bucket $BUCKET_NAME
            
            # Aguardar um pouco para garantir que a exclusão se propague
            echo "Aguardando a propagação da exclusão..."
            sleep 10
          else
            echo "O bucket $BUCKET_NAME não existe ou não está acessível."
          fi
          
          # Definir o nome do bucket como uma variável de ambiente para uso posterior
          echo "BUCKET_NAME=site-estatico-s3-asp" >> $GITHUB_ENV
          echo "WEBSITE_URL=http://site-estatico-s3-asp.s3-website-us-east-1.amazonaws.com/" >> $GITHUB_ENV

  terraform:
    name: 'Terraform'
    needs: recreate_bucket
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
          
          # Usar variáveis de ambiente definidas no job anterior
          echo "BUCKET_NAME=${{ env.BUCKET_NAME }}" >> $GITHUB_ENV
          echo "WEBSITE_URL=${{ env.WEBSITE_URL }}" >> $GITHUB_ENV

  deploy:
    name: 'Deploy Website'
    needs: terraform
    runs-on: ubuntu-latest
    env:
      BUCKET_NAME: site-estatico-s3-asp
      WEBSITE_URL: http://site-estatico-s3-asp.s3-website-us-east-1.amazonaws.com/
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update deploy timestamp
        run: |
          current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          if [ -f js/script.js ]; then
            sed -i "s/new Date()/new Date('$current_time')/g" js/script.js
          fi

      - name: Deploy to S3
        run: |
          echo "Deployando para o bucket: $BUCKET_NAME"
          aws s3 sync . s3://$BUCKET_NAME --delete --exclude "terraform/*" --exclude ".git/*" --exclude ".github/*" --exclude "README.md"

      - name: Display Website URL
        run: |
          echo "Website deployed successfully!"
          echo "You can access it at: $WEBSITE_URL"